Ты – продвинутый ассистент, работающий в Cursor над проектом «Паппи» (Django). Твоя задача – **глубоко проанализировать** весь код приложения, **согласовать** его с дизайном (макеты фронтенда, UX) и техническим заданием, а также **добавить/сгенерировать тесты** (unit, integration, end-to-end), чтобы убедиться в корректной реализации всех фич.

### Исходные ресурсы

1. **Техническое задание (ТЗ)** – включает всё: типы пользователей, функционал (авторизация, объявления, «тиндер»-механика, корзина, потеряшки, VIP, чат, модерация, отзывы).
2. **Дизайн макеты** – лежат в папке с фотографиями, содержат UI/UX концепцию (расположение блоков, кнопки, переходы, бургер-меню).
3. **Код проекта «Паппи»** – возможно разбит по папкам, часть функционала может быть в `pappy-erik/`, а также в `Pappi-repositories/` (репозитории, план-действий, готовые решения).
4. **Чек-лист / сводка** (текст, который описывает всё, что должно быть проверено и протестировано). В частности, там перечислены пункты:
   - Авторизация (по телефону, e-mail), проверка кода.
   - Профили (продавец, приют, обычный пользователь), поля (достижения, животные, опыт).
   - Чат и сообщения, VIP-консьерж, счёт/оплата.
   - «Тиндер» (котосиндер), механика лайков/пар, вкладка «Пары».
   - Создание объявлений (товары, услуги, животные, потеряшки).
   - Каталог и фильтры, избранное.
   - Отзывы и рейтинг (звёзды, бейджи, комментарии, жалобы).
   - VIP-подписка (пакеты, оплата).
   - Общая модерация, уведомления, приватность (hide_email, hide_phone).

### Что нужно сделать

#### 1. Глубокий анализ кода и соответствие дизайну

- Пройтись по **всем файлам** (models.py, views.py, urls.py, forms.py, templates, js, etc.) и сравнить с требованиями ТЗ и макетами дизайна:
  - Проверить, **достаточно ли** полей в моделях (например, есть ли поле “lost_found” для потеряшек, есть ли “vip_package”).
  - Сверить **URLы и views** с макетами (страницы, навигация, бургер-меню, каталоги).
  - Убедиться, что UI-файлы (шаблоны HTML/JS/CSS) соответствуют UX-макетам (расположение кнопок, ссылки, переходы).  
  - Выявить **расхождения** (чего не хватает, какие поля/функции не реализованы, или реализованы не так).

- **Добавить комментарии, аннотации**:
  - Комментарии # TODO / # NOTE / # FIXME там, где код сырой, нужен рефакторинг или просто пояснение логики.
  - Type hints (Python 3.10+) в функциях / методах.
  - PEP-8 форматирование (пробелы, отступы).

- **Исправить ошибки, провести дебаг**:
  - Если найдены несоответствия или баги (неправильные связи ForeignKey, логика проверок, пересекающиеся URL), поправить их, объяснить, как именно.
  - Проверить совместимость версий Django / зависимостей, удалить неиспользуемые импорты.

#### 2. Подробный план тестирования (unit, integration, end-to-end)

Воспользуйся **единым чек-листом** (приведён ниже) для покрытия всех аспектов проекта:

**(1) Авторизация и регистрация**  
- Unit-тест: валидация телефона, логика отправки/проверки кода.  
- Integration-тест: регистрируем нового пользователя, проверяем сессию/JWT.  
- End-to-end: полный сценарий – пользователь вводит телефон → SMS → подтверждает → попадает в личный кабинет.

**(2) Профиль пользователя**  
- Unit-тест: поля user_type, образование, опыт. Сохранение/обновление модели.  
- Integration: сценарий «Обновить профиль, добавить животное, включить hide_phone».  
- End-to-end: «Стать продавцом», проверяем, что пользователь становится `is_seller` + поля портфолио.

**(3) Чат и сообщения (VIP-консьерж)**  
- Unit: создание чата, отправка сообщения, пометка «прочитано».  
- Integration: «Выставить счёт», проверить взаимосвязь с платёжной системой (если есть) или заглушкой.  
- End-to-end: Лайк объявления → появляется чат → продавец выставляет счёт → покупатель оплачивает → всё ок.

**(4) Тиндер (Котосиндер / вязка)**  
- Unit: добавление Swipe (лайк), проверка matched = True, если оба лайкнули.  
- Integration: отображение в вкладке «Пары», «Лайки», «Невзаимное».  
- End-to-end: пользователь публикует животное для вязки, другой лайкает, образуется «пара».

**(5) Создание объявления (товары, услуги, животные, потеряшки)**  
- Unit: проверка модели Ad (поля, категории, обязательные поля, enum/choice).  
- Integration: POST /ads/create, проверка ответа, редактирование, архив.  
- End-to-end: пользователь заполняет форму «Потеряшка» (место, время пропажи), публикует, на странице каталога видит объявление.

**(6) Каталог и фильтры**  
- Unit: проверка кастомных фильтров (по породе, возрасту, услугам).  
- Integration: GET /ads?category=..., сортировка, избранное (сердечко).  
- End-to-end: поиск конкретной породы, проверка, что результат корректен.

**(7) Отзывы и рейтинг**  
- Unit: модель Review, rating ∈ [1..5], поля (текст, фото), теги, жалобы.  
- Integration: создание отзыва, подсчёт среднего рейтинга, комментарии от продавца, жалоба от третьего лица.  
- End-to-end: покупатель оформил сделку, пишет отзыв, продавец отвечает, кто-то жалуется.

**(8) VIP**  
- Unit: модель VIP / Subscription, оплата, поле vip_expiration.  
- Integration: при оплате → статус VIP = True, появляется чат «VIP-консьерж».  
- End-to-end: пользователь выбирает пакет, платит, получает функции VIP.

**(9) Общие проверки**  
- Разграничение ролей (is_seller, is_shelter, VIP).  
- Модерация (статусы объявлений, проверка приюта).  
- Уведомления (like, сообщение, VIP оплачен, отзыв).  
- Приватность (hide_phone, hide_email).  

#### 3. Как действовать

1. **Сначала** проанализируй весь код (бэкенд + файлы дизайна/шаблонов) – сверь с вышеуказанным списком (пункты 1–9).  
2. **Добавь комментарии** в код, docstrings, при необходимости выполни рефакторинг. Покажи, как выглядела проблема и как исправил.  
3. **Сформируй или дополни** существующие тесты:
   - Разложи их по папкам (например, `tests/test_auth.py`, `tests/test_profile.py`, `tests/test_ads.py` и т. д.) или по приложениям.  
   - Для каждого пункта (1–9) придумай unit, integration и e2e-тест (если применимо).  
   - Объясни, как их запускать (pytest или manage.py test), как смотреть результаты.

4. **Учитывай** макеты дизайна:
   - Если дизайн предполагает некие поля / кнопки / статусы, а в коде их нет – зафиксируй это (# TODO), либо предложи, как добавить.
   - Если бэкенд не возвращает нужные данные для фронтенда (например, нет API-поля «reward» в потеряшках), добавь или отрефактори.

В результате хотим получить:
- **Отлаженный**, документированный код (PEP-8, комментарии, docstrings).  
- **Полное соответствие** дизайну (UX-логика) и ТЗ.  
- **Набор тестов** (unit/integration/e2e), охватывающих все ключевые сценарии (авторизация, чат, объявления, лайки, VIP, потеряшки, отзывы, корзина и т.д.).

### Формат ответа

- Сначала **дай анализ**, перечисли, какие файлы/модули ты изучил, какие проблемы обнаружил, что не совпадает с ТЗ/дизайном.
- Затем **покажи правки** (или diffs) в коде (models, views, urls, templates, JS).
- Далее **сгенерируй или дополни** тесты (по пунктам 1–9), объясни структуру.
- Напиши, **как** проверить (migrate, runserver, manage.py test, проверка UI).
- Если что-то не ясно, переспроси. Если чего-то нет в коде (например, VIP-подписка не реализована), предложи # TODO или сгенерируй базовую реализацию.

**Приступай** к глубокому анализу, рефакторингу и генерации тестов, опираясь на вышеописанные пункты и сводный чек-лист!
