Ты – продвинутый ассистент в среде Cursor. Мне нужно **создать (или дополнить) подробную документацию** по Django-проекту «Паппи». Документация должна включать в себя:

1. **Общее описание проекта**:
   - Название, назначение (продажа животных/товаров, приюты, тиндер-механика, потеряшки и т.д.).
   - Краткая история (какие задачи решает, кто пользователи, как устроена монетизация).

2. **Структура проекта**:
   - Какие приложения (apps) есть: `accounts`, `announcements`, `messaging`, `reviews`, `cart` или иные.
   - Краткое описание каждого приложения (за что оно отвечает, какие модели содержит).

3. **Что уже реализовано**:
   - Подробно: модели пользователей (с ролями is_seller, is_shelter, etc.), объявления, корзина, чат, VIP, потеряшки, лайки (котосиндер).
   - Как устроена авторизация/регистрация (телефон, госуслуги).
   - Какие endpoints/view-функции уже есть, коротко: `GET /announcements/`, `POST /announcements/new/`, `GET /chat/<id>/` и т.д.

4. **Что требует доработки**:
   - Перечислить пункты, которые **заложены** в ТЗ, но **не** реализованы (например, некоторые фильтры каталога, подписка для специалистов, отдельные поля «health_status» и т.д.).
   - Указать причину, почему не доделано (возможно, нет макетов UI, приоритет ниже и т.д.).
   - Сформировать список TODO (что планируется, сроки, кто отвечает, при необходимости).

5. **Тестирование**:
   - Указать **тип** тестов (unit, integration, end-to-end).
   - Описать **какие тесты покрыты** (например, авторизация, CRUD объявлений, чат, VIP-подписка).
   - **Глубина** тестов: что конкретно проверяется (валидация полей, сценарий оплаты, лайк -> чат и т.д.).
   - Как **запустить** тесты (manage.py test / pytest).
   - Упомянуть **результаты**: покрытие (%) или хотя бы список пройденных сценариев.
   - Если какие-то тесты **в процессе**, отметить это (TODO).

6. **Инструкция для фронтенд-разработчика**:
   - **Описание API** (коротко, где у нас endpoints, какие методы, какие URL).
   - **Формат запросов/ответов** (примеры JSON, какие поля нужны: title, price, user_id, category и т.д.).
   - **Авторизация**: как получить токен (или куки), как передавать его.
   - **Структура моделей** (чтобы фронтенд понимал, какие поля у объявления, пользователя и т.д.).
   - Где лежит код, если это DRF – `serializers.py`, если чисто Django – как формируются данные в шаблонах.
   - Рекомендации (например, если нужна пагинация, какие параметры передавать, если нужны фильтры, какие query-параметры есть).

7. **Рекомендации по локальному запуску** (Developer Guide):
   - Какие шаги: `git clone`, `pip install -r requirements.txt`, `python manage.py migrate`, `python manage.py runserver`.
   - Переменные окружения (если есть), ключи (SMS провайдер, OAuth для Госуслуг) – указать, куда вставлять.
   - Локальные настройки (DEBUG=True, DATABASE_URL).
   - Как настроить `media/` и `static/`, если нужно.

8. **Структура документа**:
   - Разбей документацию на разделы: “Обзор”, “Архитектура”, “Функционал”, “Тесты”, “FrontEnd Integration”, “Dev Setup”, “TODO”.
   - В каждом разделе – подробные подзаголовки, перечисления, схемы (при необходимости).

9. **Формат ответа**:
   - Генерируй **полный текст** документации в удобном виде (Markdown или reStructuredText), со сквозными заголовками.
   - Упомяни конкретные файлы (где лежат модели, вьюхи, тесты).
   - Если чего-то не хватает (например, нет данных о модуле X), вставляй комментарий “# TODO: добавить информацию о X”.

10. **Учти**, что часть функционала может быть в папке `pappy-erik/`, а часть – в `Pappi-repositories/`, и нам нужно отразить это в документации: что взято из каких репозиториев, как интегрировано.
   
**Задача**: сформировать итоговую документацию, охватывающую весь проект «Паппи» (текущее состояние, что доделано, что нет, как всё устроено, как тестировать, как фронтенду работать с этим кодом). Используй структуру, описанную выше, и генерируй законченный текст документации. Если чего-то нет в коде – добавь # TODO. Если нужна схема, опиши её текстово.

Приступай к написанию документации!
