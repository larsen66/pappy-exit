Ты – продвинутый ассистент по написанию кода в среде Cursor. Мне нужно:

1. **Перевести проект «Паппи» на PostgreSQL**:
   - Проверить, какие настройки в `settings.py` надо изменить (DATABASES, psycopg2).
   - как локально установить PostgreSQL, создать базу "pappi_db", дать роль (user/password).

2. **Организовать структуру данных и миграции**:
   - Проанализировать модели (User, Announcement, Review, Chat, VIP, LostFound и т.д.), проверить, нет ли конфликтов типов (например, TextField, CharField, JSONField).
   - Убедиться, что все миграции создаются корректно, без дублирования. Выполнить `python manage.py makemigrations` / `python manage.py migrate`.
   - Если нужно изменить типы полей (например, для slug, для lat/lng, для JSONB) – сгенерировать миграции.

3. **Оптимизация и индексы**:
   - Проверь, нужны ли индексы (например, по полям category, user_id, slug).  
   - Если предусмотрены частые запросы, возможно добавить `db_index=True` на некоторые поля, или создать отдельные индексы через `models.Index`.  
   - Если есть поиск по тексту (объявления), можно рассмотреть использование `django.contrib.postgres.search` (Full Text Search) или отдельного SearchVector.

4. **Целостность данных** (constraints):
   - Убедиться, что связи (ForeignKey, ManyToMany) корректны.  
   - Возможно, если есть поле для цены, добавить CHECK (price >= 0).  
   - Если поле rating ∈ [1..5], можно тоже CHECK (rating >= 1 AND rating <= 5).  
   - Рассмотреть UNIQUE (например, phone уникален?).

5. **Тесты** с учётом PostgreSQL:
   - Дополнить тесты (unit, integration) на уровне базы данных.  
   - Проверить, что миграции и создание схемы проходят без ошибок: при запуске `python manage.py test` или pytest, создать тестовую БД (pappi_test), прогнать все тесты.  
   - Если есть проверка индексов или функций (например, триггер), задокументировать это.  
   - Опционально – можно добавить тесты на корректность CHECK-констрейнтов (пытаться создать объявление с отрицательной ценой и ждать ошибку).

6. **Примеры кода и инструкций**:
   - Сгенерируй пример `docker-compose.yml` (с сервисами: db (PostgreSQL), web (Django), redis если нужно).  
   - Покажи, как в `settings.py` подключиться к postgres (HOST, PORT, NAME, USER, PASSWORD).  
   - Дай рекомендации, как локально проверить/подключиться к базе (psql, dBeaver).

7. **Документация**:
   - Объясни, как (шаг за шагом) переходить с SQLite на PostgreSQL (если ранее был SQLite).  
   - Как сделать бэкап/restore (pg_dump, pg_restore).  
   - Какие настройки (LOCALE, COLLATE) предпочтительны, если нужно полнотекстовый поиск.  
   - Упомяни, что можно использовать операции `UNION`, JSONB-поля для расширенных данных, массивы PostgreSQL для тегов, если это нужно в модели (например, интересы животных).

8. **Выполнить** глубокий анализ:
   - Посмотреть на текущие модели, указать, где стоит применить `db_index=True`.  
   - Предложить новые поля (например, геолокация – DecimalField с определённой точностью, либо PostGIS).  
   - Проверить, не нужен ли для чата массив или JSONB для вложений.  
   - Если есть проблемы с производительностью – упомянуть EXPLAIN, анализ запросов.

**Важно**: 
- Покажи **минимальный рабочий пример** final-кода: `settings.py` с правильными параметрами PostgreSQL, пример docker-compose, кусок models с CHECK-констрейнтом, и инструкция, как запустить/мигрировать/протестировать.  
- Следи, чтобы всё соответствовало техническому заданию (включая поля «VIP», «lost_found», «category», «swipe», «rating»).  
- Если чего-то нет в проекте – сгенерируй заглушки (TODO) или чётко укажи, что нужно доработать в модели.

**Приступай** к генерации кода и подробных пояснений! 
